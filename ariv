import sys

# Register mapping
registers = {
    'zero': '00000', 'ra': '00001', 'sp': '00010', 'gp': '00011', 'tp': '00100',
    't0': '00101', 't1': '00110', 't2': '00111', 's0': '01000', 's1': '01001',
    'a0': '01010', 'a1': '01011', 'a2': '01100', 'a3': '01101', 'a4': '01110',
    'a5': '01111', 'a6': '10000', 'a7': '10001', 's2': '10010', 's3': '10011',
    's4': '10100', 's5': '10101', 's6': '10110', 's7': '10111', 's8': '11000',
    's9': '11001', 's10': '11010', 's11': '11011', 't3': '11100', 't4': '11101',
    't5': '11110', 't6': '11111'
}

# Opcode, funct3, funct7 for instructions
instruction_formats = {
    'R': {'add': ('0110011', '000', '0000000'), 'sub': ('0110011', '000', '0100000'),
          'or': ('0110011', '110', '0000000'), 'srl': ('0110011', '101', '0000000')},

    'I': {'addi': ('0010011', '000'), 'lw': ('0000011', '010'), 'jalr': ('1100111', '000')},

    'S': {'sw': ('0100011', '010')},

    'B': {'beq': ('1100011', '000'), 'bne': ('1100011', '001')},

    'J': {'jal': ('1101111', None)}
}

labels = {}  # Dictionary to store label addresses
binary_code = []  # List to store generated binary instructions

# Read input file
with open("read.txt", "r") as file:
    lines = file.readlines()

# First pass: Identify label positions
pc = 0  # Program Counter (address of instruction)
for line in lines:
    line = line.strip()
    if not line:
        continue  # Skip empty lines
    parts = line.replace(",", " ").split()  # Fix comma handling
    if parts[0][-1] == ":":  # Label detected
        labels[parts[0][:-1]] = pc  # Store label name without ":"
    else:
        pc += 4  # Increment PC for each instruction

# Second pass: Convert assembly to binary
pc = 0
for line in lines:
    line = line.strip()
    if not line:
        continue  # Skip empty lines

    parts = line.replace(",", " ").split()
    if parts[0][-1] == ":":  # If a label is at the beginning of a line
        parts = parts[1:]  # Remove label part

    if not parts:
        continue

    instr = parts[0]

    if instr in instruction_formats['R']:  # R-type
        rd, rs1, rs2 = registers[parts[1]], registers[parts[2]], registers[parts[3]]
        opcode, funct3, funct7 = instruction_formats['R'][instr]
        binary = f"{funct7}{rs2}{rs1}{funct3}{rd}{opcode}"


binary_code.append(binary)
    pc += 4  # Increment PC

# Write output file
with open("output.txt", "w") as file:
    for binary in binary_code:
        file.write(binary + "\n")

print("Assembly successfully converted to binary and saved in output.txt")
